Mutex vs Semaphore
-------------------------


What is the difference between a mutex and a semaphore? When should you use a mutex and when should you use a 
semaphore? 

A concrete understanding of Operating System concepts is required to design/develop smart applications. 

As per operating system terminology, mutexes and semaphores are kernel resources that provide synchronization 
services (also called synchronization primitives). Why do we need such synchronization primitives? Won’t only one 
be sufficient? To answer these questions, we need to understand a few keywords. 
Please read the posts on atomicity and critical section. We will illustrate with examples to understand these concepts well, 
rather than following the usual OS textual description. 

The producer-consumer problem: 

Consider the standard producer-consumer problem. Assume, we have a buffer of 4096-byte length. 
A producer thread collects the data and writes it to the buffer. A consumer thread processes the 
collected data from the buffer. The objective is, both the threads should not run at the same time. 

Using Mutex: 

A mutex provides mutual exclusion, either producer or consumer can have the key (mutex) and proceed with their work. 
As long as the buffer is filled by the producer, the consumer needs to wait, and vice versa. 

At any point of time, only one thread can work with the entire buffer. The concept can be generalized using 
semaphore. 

Using Semaphore: 

A semaphore is a generalized mutex. In lieu of a single buffer, we can split the 4 KB buffer into four 1 KB buffers 
(identical resources). A semaphore can be associated with these four buffers. The consumer and producer can work on 
different buffers at the same time. 

Misconception: 

There is an ambiguity between binary semaphore and mutex. We might have come across that a mutex is a binary 
semaphore. But it is not! The purpose of mutex and semaphore are different. Maybe, due to similarity in their 
implementation a mutex would be referred to as a binary semaphore. 

Strictly speaking, a mutex is a locking mechanism used to synchronize access to a resource. Only one task 
(can be a thread or process based on OS abstraction) can acquire the mutex. It means there is ownership associated 
with a mutex, and only the owner can release the lock (mutex). 

Semaphore is signaling mechanism (“I am done, you can carry on” kind of signal). For example, if you are listening 
to songs (assume it as one task) on your mobile phone and at the same time, your friend calls you, an interrupt is 
triggered upon which an interrupt service routine (ISR) signals the call processing task to wakeup. 

General Questions: 

1. Can a thread acquire more than one lock (Mutex)? 

Yes, it is possible that a thread is in need of more than one resource, hence the locks. If any lock is not available 
the thread will wait (block) on the lock. 

2. Can a mutex be locked more than once? 

A mutex is a lock. Only one state (locked/unlocked) is associated with it. However, a recursive mutex can be locked 
more than once (POSIX compliant systems), in which a count is associated with it, yet retains only one state 
(locked/unlocked). The programmer must unlock the mutex as many number times as it was locked. 

3. What happens if a non-recursive mutex is locked more than once. 

Deadlock. If a thread that had already locked a mutex, tries to lock the mutex again, it will enter into the waiting 
list of that mutex, which results in a deadlock. It is because no other thread can unlock the mutex. 
An operating system implementer can exercise care in identifying the owner of the mutex and return if it is already locked by a same thread to prevent deadlocks. 


4. Are binary semaphore and mutex same? 

No. We suggest treating them separately, as it is explained in signaling vs locking mechanisms. But a binary 
semaphore may experience the same critical issues (e.g. priority inversion) associated with a mutex. 
We will cover these in a later article. 

A programmer can prefer mutex rather than creating a semaphore with count 1. 

5. What is a mutex and critical section? 

Some operating systems use the same word critical section in the API. Usually a mutex is a costly operation due to 
protection protocols associated with it. At last, the objective of mutex is atomic access. There are other ways 
to achieve atomic access like disabling interrupts which can be much faster but ruins responsiveness. 
The alternate API makes use of disabling interrupts. 

6. What are events? 

The semantics of mutex, semaphore, event, critical section, etc… are same. All are synchronization primitives. 
Based on their cost in using them they are different. We should consult the OS documentation for exact details. 

7. Can we acquire mutex/semaphore in an Interrupt Service Routine? 

An ISR will run asynchronously in the context of current running thread. It is not recommended to query 
(blocking call) the availability of synchronization primitives in an ISR. The ISR are meant be short, the call to mutex/semaphore may block the current running thread. However, an ISR can signal a semaphore or unlock a mutex. 

8. What we mean by “thread blocking on mutex/semaphore” when they are not available? 

Every synchronization primitive has a waiting list associated with it. When the resource is not available, 
the requesting thread will be moved from the running list of processors to the waiting list of the synchronization 
primitive. When the resource is available, the higher priority thread on the waiting list gets the resource (more precisely, it depends on the scheduling policies). 

9. Is it necessary that a thread must block always when resource is not available? 

Not necessary. If the design is sure ‘what has to be done when resource is not available‘, the thread can take up 
that work (a different code branch). To support application requirements the OS provides non-blocking API. 

For example POSIX pthread_mutex_trylock() API. When the mutex is not available the function returns immediately 
whereas the API pthread_mutex_lock() blocks the thread till the resource is available. 