How Linux Kernel Boots?
--------------------------------------

There are many processes are running in the background when we press the power button of the system. It is very important to learn the booting process to understand the working of any operating system. To solve the booting error it is a must to know how kernel boots. It is a very interesting topic to learn let us start with the basics. A simplified read of the boot method is given below:

Stages of Linux Boot Process:
1.The machine’s BIOS or boot microcode hundreds and runs a boot loader.
2.Boot loader finds the kernel image on the disk and loads it into memory, to start the system.
3.The kernel initializes the devices and their drivers.
4.The kernel mounts the basic filesystem.
5.The kernel starts a program referred to as init with a method ID zero
6.init sets the remainder of the system processes in motion.
7.For some purpose, init starts a method permitting you to log in, typically at the top or close to the top of the boot sequence.

----------------------------------------------------------------------------------------------------------
|  SYSTEM STARTUP BIOS --->>> MBR BOOTLOADER --->>> GRUB --->>> KERNEL INIT --->>> INIT --->>> RUN LEVEL  |
-----------------------------------------------------------------------------------------------------------

Startup Message:
Traditional UNIX operating system systems manufacture several diagnostic messages upon boot that tell you regarding the boot method. The messages come back initially from the kernel and so from processes and low-level formatting procedures that init starts. However, these messages aren’t pretty or consistent, and in some cases, they aren’t even terribly informative. Additionally, hardware enhancements have caused the kernel to start a lot quicker than before the messages flash by therefore quickly, it may be tough to check what’s happening. As a result, most current Linux distributions do their best to cover boot medical specialty with splash screens and different varieties of filler to distract you whereas the system starts.

Kernel Initialization and Boot Options:
CPU examination
Memory examination
Device bus discovery
Device discovery
Auxiliary kernel system setup
Root filesystem mount
Userspace begin
The first 2 steps aren’t too exceptional, however, once the kernel gets to devices, the question of dependencies arises. as an example, the disk device drivers might rely on bus support and SCSI system support. In general, you won’t need to worry regarding the dependencies, except that some necessary parts are also loadable kernel modules instead of a part of the most kernel

Kernel Parameters:
When the Linux kernel starts, it receives a group of text-based kernel parameters containing some further system details. The parameters specify many alternative kinds of behavior, like the number of diagnostic output the kernel ought to manufacture and device driver–specific choices. The Ro parameter instructs the kernel to mount the basis filesystem in read-only mode upon user area begins. This normal read-only mode ensures that fsck can safely check the basis filesystem before attempting to do something serious. When the check, the bootup method remounts the basis filesystem in read-write mode.

Boot Loader Tasks:
Select from multiple kernels.
Switch between sets of kernel parameters.
Provide support for booting different operating systems.
Bootloaders became significantly a lot of advanced since the origin of the Linux kernel, with options like command-line history and menu systems, however, a basic want has perpetually been flexibility in kernel image and parameter choice. One stunning development is that some wants have really diminished. as an example, as a result of you’ll be able to perform associate emergency or recovery boot from a USB device, you seldom need to worry about manually getting into kernel parameters or going into single-user mode. Current bootloaders supply a lot of power than ever, which may be notably handy if you’re building custom kernels or simply wish to tweak parameters.

Boot Loader Overview:
GRUB – A near-universal normal on Linux systems, with BIOS/MBR and UEFI versions.
LILO – One of the primary Linux bootloaders. ELILO could be a UEFI version.
SYSLINUX – It may be organized to run from many alternative styles of filesystems.
LOADLIN – Boots a kernel from DOS.
System-boot a straightforward UEFI boot manager.
coreboot – A superior replacement for the computer BIOS which will embody a kernel.
Linux Kernel EFISTUB A kernel plug-in for loading the kernel directly from associate EFI/UEFI System Partition.
EFI Linux – A UEFI boot loader meant to function as a model and reference for different UEFI boot loaders.
GRUB Introduction And Work:
GRUB stands for Grand Unified Boot Loader. One of GRUB’s most vital capabilities is filesystem navigation that enables straightforward kernel image and configuration choice.

Upon finding the boot code, the BIOS hundreds and executes it. This is often wherever GRUB begins.
The GRUB core hundreds.
The core initializes. At now, GRUB will currently access disks and filesystems.
GRUB identifies its boot partition and hundreds of configurations there.
GRUB offers the user an opportunity to vary the configuration.
GRUB executes the configuration after a timeout or user action.
In the course of execution of the configuration, GRUB might load further code within the boot partition. a number of these modules are also preloaded.
To load and execute the kernel GRUB executes boot commands.

------------------------------------------------------------

1. BIOS

BIOS stands for Basic Input/Output System
Performs some system integrity checks
Searches, loads, and executes the boot loader program.
It looks for boot loader in floppy, cd-rom, or hard drive. You can press a key (typically F12 of F2, but it depends on your system) during the BIOS startup to change the boot sequence.
Once the boot loader program is detected and loaded into the memory, BIOS gives the control to it.
So, in simple terms BIOS loads and executes the MBR boot loader.

2. MBR

MBR stands for Master Boot Record.
It is located in the 1st sector of the bootable disk. Typically /dev/hda, or /dev/sda
MBR is less than 512 bytes in size. This has three components 1) primary boot loader info in 1st 446 bytes 2) partition table info in next 64 bytes 3) mbr validation check in last 2 bytes.
It contains information about GRUB (or LILO in old systems).
So, in simple terms MBR loads and executes the GRUB boot loader.

3. GRUB

#boot=/dev/sda
default=0
timeout=5
splashimage=(hd0,0)/boot/grub/splash.xpm.gz
hiddenmenu
title CentOS (2.6.18-194.el5PAE)
          root (hd0,0)
          kernel /boot/vmlinuz-2.6.18-194.el5PAE ro root=LABEL=/
          initrd /boot/initrd-2.6.18-194.el5PAE.img
GRUB stands for Grand Unified Bootloader.
If you have multiple kernel images installed on your system, you can choose which one to be executed.
GRUB displays a splash screen, waits for few seconds, if you don’t enter anything, it loads the default kernel image as specified in the grub configuration file.
GRUB has the knowledge of the filesystem (the older Linux loader LILO didn’t understand filesystem).
Grub configuration file is /boot/grub/grub.conf (/etc/grub.conf is a link to this). The following is sample grub.conf of CentOS.
As you notice from the above info, it contains kernel and initrd image.
So, in simple terms GRUB just loads and executes Kernel and initrd images.

4. Kernel

Mounts the root file system as specified in the “root=” in grub.conf
Kernel executes the /sbin/init program
Since init was the 1st program to be executed by Linux Kernel, it has the process id (PID) of 1. Do a ‘ps -ef | grep init’ and check the pid.
initrd stands for Initial RAM Disk.
initrd is used by kernel as temporary root file system until kernel is booted and the real root file system is mounted. It also contains necessary drivers compiled inside, which helps it to access the hard drive partitions, and other hardware.

5. Init

Looks at the /etc/inittab file to decide the Linux run level.
Following are the available run levels
0 – halt
1 – Single user mode
2 – Multiuser, without NFS
3 – Full multiuser mode
4 – unused
5 – X11
6 – reboot
Init identifies the default initlevel from /etc/inittab and uses that to load all appropriate program.
Execute ‘grep initdefault /etc/inittab’ on your system to identify the default run level
If you want to get into trouble, you can set the default run level to 0 or 6. Since you know what 0 and 6 means, probably you might not do that.
Typically you would set the default run level to either 3 or 5.

6. Runlevel programs

When the Linux system is booting up, you might see various services getting started. For example, it might say “starting sendmail …. OK”. Those are the runlevel programs, executed from the run level directory as defined by your run level.
Depending on your default init level setting, the system will execute the programs from one of the following directories.
Run level 0 – /etc/rc.d/rc0.d/
Run level 1 – /etc/rc.d/rc1.d/
Run level 2 – /etc/rc.d/rc2.d/
Run level 3 – /etc/rc.d/rc3.d/
Run level 4 – /etc/rc.d/rc4.d/
Run level 5 – /etc/rc.d/rc5.d/
Run level 6 – /etc/rc.d/rc6.d/
Please note that there are also symbolic links available for these directory under /etc directly. So, /etc/rc0.d is linked to /etc/rc.d/rc0.d.
Under the /etc/rc.d/rc*.d/ directories, you would see programs that start with S and K.
Programs starts with S are used during startup. S for startup.
Programs starts with K are used during shutdown. K for kill.
There are numbers right next to S and K in the program names. Those are the sequence number in which the programs should be started or killed.
For example, S12syslog is to start the syslog deamon, which has the sequence number of 12. S80sendmail is to start the sendmail daemon, which has the sequence number of 80. So, syslog program will be started before sendmail.
There you have it. That is what happens during the Linux boot process.

